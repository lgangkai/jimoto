// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: commodity/commodity.proto

package commodity

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Commodity service

func NewCommodityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Commodity service

type CommodityService interface {
	GetCommodity(ctx context.Context, in *GetCommodityRequest, opts ...client.CallOption) (*GetCommodityResponse, error)
	GetLatestCommodityList(ctx context.Context, in *GetLatestCommodityListRequest, opts ...client.CallOption) (*GetLatestCommodityListResponse, error)
	PublishCommodity(ctx context.Context, in *PublishCommodityRequest, opts ...client.CallOption) (*PublishCommodityResponse, error)
	DeleteCommodity(ctx context.Context, in *DeleteCommodityRequest, opts ...client.CallOption) (*DeleteCommodityResponse, error)
	UpdateCommodity(ctx context.Context, in *UpdateCommodityRequest, opts ...client.CallOption) (*UpdateCommodityResponse, error)
	GetCommodityImages(ctx context.Context, in *GetCommodityImagesRequest, opts ...client.CallOption) (*GetCommodityImagesResponse, error)
	LikeCommodity(ctx context.Context, in *LikeCommodityRequest, opts ...client.CallOption) (*LikeCommodityResponse, error)
	UnlikeCommodity(ctx context.Context, in *UnlikeCommodityRequest, opts ...client.CallOption) (*UnlikeCommodityResponse, error)
	GetCommodityLikedUsers(ctx context.Context, in *GetCommodityLikedUsersRequest, opts ...client.CallOption) (*GetCommodityLikedUsersResponse, error)
	GetUserLikeCommodities(ctx context.Context, in *GetUserLikeCommoditiesRequest, opts ...client.CallOption) (*GetUserLikeCommoditiesResponse, error)
	GetCommodities(ctx context.Context, in *GetCommoditiesRequest, opts ...client.CallOption) (*GetCommoditiesResponse, error)
}

type commodityService struct {
	c    client.Client
	name string
}

func NewCommodityService(name string, c client.Client) CommodityService {
	return &commodityService{
		c:    c,
		name: name,
	}
}

func (c *commodityService) GetCommodity(ctx context.Context, in *GetCommodityRequest, opts ...client.CallOption) (*GetCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.GetCommodity", in)
	out := new(GetCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) GetLatestCommodityList(ctx context.Context, in *GetLatestCommodityListRequest, opts ...client.CallOption) (*GetLatestCommodityListResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.GetLatestCommodityList", in)
	out := new(GetLatestCommodityListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) PublishCommodity(ctx context.Context, in *PublishCommodityRequest, opts ...client.CallOption) (*PublishCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.PublishCommodity", in)
	out := new(PublishCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) DeleteCommodity(ctx context.Context, in *DeleteCommodityRequest, opts ...client.CallOption) (*DeleteCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.DeleteCommodity", in)
	out := new(DeleteCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) UpdateCommodity(ctx context.Context, in *UpdateCommodityRequest, opts ...client.CallOption) (*UpdateCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.UpdateCommodity", in)
	out := new(UpdateCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) GetCommodityImages(ctx context.Context, in *GetCommodityImagesRequest, opts ...client.CallOption) (*GetCommodityImagesResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.GetCommodityImages", in)
	out := new(GetCommodityImagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) LikeCommodity(ctx context.Context, in *LikeCommodityRequest, opts ...client.CallOption) (*LikeCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.LikeCommodity", in)
	out := new(LikeCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) UnlikeCommodity(ctx context.Context, in *UnlikeCommodityRequest, opts ...client.CallOption) (*UnlikeCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.UnlikeCommodity", in)
	out := new(UnlikeCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) GetCommodityLikedUsers(ctx context.Context, in *GetCommodityLikedUsersRequest, opts ...client.CallOption) (*GetCommodityLikedUsersResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.GetCommodityLikedUsers", in)
	out := new(GetCommodityLikedUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) GetUserLikeCommodities(ctx context.Context, in *GetUserLikeCommoditiesRequest, opts ...client.CallOption) (*GetUserLikeCommoditiesResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.GetUserLikeCommodities", in)
	out := new(GetUserLikeCommoditiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) GetCommodities(ctx context.Context, in *GetCommoditiesRequest, opts ...client.CallOption) (*GetCommoditiesResponse, error) {
	req := c.c.NewRequest(c.name, "Commodity.GetCommodities", in)
	out := new(GetCommoditiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Commodity service

type CommodityHandler interface {
	GetCommodity(context.Context, *GetCommodityRequest, *GetCommodityResponse) error
	GetLatestCommodityList(context.Context, *GetLatestCommodityListRequest, *GetLatestCommodityListResponse) error
	PublishCommodity(context.Context, *PublishCommodityRequest, *PublishCommodityResponse) error
	DeleteCommodity(context.Context, *DeleteCommodityRequest, *DeleteCommodityResponse) error
	UpdateCommodity(context.Context, *UpdateCommodityRequest, *UpdateCommodityResponse) error
	GetCommodityImages(context.Context, *GetCommodityImagesRequest, *GetCommodityImagesResponse) error
	LikeCommodity(context.Context, *LikeCommodityRequest, *LikeCommodityResponse) error
	UnlikeCommodity(context.Context, *UnlikeCommodityRequest, *UnlikeCommodityResponse) error
	GetCommodityLikedUsers(context.Context, *GetCommodityLikedUsersRequest, *GetCommodityLikedUsersResponse) error
	GetUserLikeCommodities(context.Context, *GetUserLikeCommoditiesRequest, *GetUserLikeCommoditiesResponse) error
	GetCommodities(context.Context, *GetCommoditiesRequest, *GetCommoditiesResponse) error
}

func RegisterCommodityHandler(s server.Server, hdlr CommodityHandler, opts ...server.HandlerOption) error {
	type commodity interface {
		GetCommodity(ctx context.Context, in *GetCommodityRequest, out *GetCommodityResponse) error
		GetLatestCommodityList(ctx context.Context, in *GetLatestCommodityListRequest, out *GetLatestCommodityListResponse) error
		PublishCommodity(ctx context.Context, in *PublishCommodityRequest, out *PublishCommodityResponse) error
		DeleteCommodity(ctx context.Context, in *DeleteCommodityRequest, out *DeleteCommodityResponse) error
		UpdateCommodity(ctx context.Context, in *UpdateCommodityRequest, out *UpdateCommodityResponse) error
		GetCommodityImages(ctx context.Context, in *GetCommodityImagesRequest, out *GetCommodityImagesResponse) error
		LikeCommodity(ctx context.Context, in *LikeCommodityRequest, out *LikeCommodityResponse) error
		UnlikeCommodity(ctx context.Context, in *UnlikeCommodityRequest, out *UnlikeCommodityResponse) error
		GetCommodityLikedUsers(ctx context.Context, in *GetCommodityLikedUsersRequest, out *GetCommodityLikedUsersResponse) error
		GetUserLikeCommodities(ctx context.Context, in *GetUserLikeCommoditiesRequest, out *GetUserLikeCommoditiesResponse) error
		GetCommodities(ctx context.Context, in *GetCommoditiesRequest, out *GetCommoditiesResponse) error
	}
	type Commodity struct {
		commodity
	}
	h := &commodityHandler{hdlr}
	return s.Handle(s.NewHandler(&Commodity{h}, opts...))
}

type commodityHandler struct {
	CommodityHandler
}

func (h *commodityHandler) GetCommodity(ctx context.Context, in *GetCommodityRequest, out *GetCommodityResponse) error {
	return h.CommodityHandler.GetCommodity(ctx, in, out)
}

func (h *commodityHandler) GetLatestCommodityList(ctx context.Context, in *GetLatestCommodityListRequest, out *GetLatestCommodityListResponse) error {
	return h.CommodityHandler.GetLatestCommodityList(ctx, in, out)
}

func (h *commodityHandler) PublishCommodity(ctx context.Context, in *PublishCommodityRequest, out *PublishCommodityResponse) error {
	return h.CommodityHandler.PublishCommodity(ctx, in, out)
}

func (h *commodityHandler) DeleteCommodity(ctx context.Context, in *DeleteCommodityRequest, out *DeleteCommodityResponse) error {
	return h.CommodityHandler.DeleteCommodity(ctx, in, out)
}

func (h *commodityHandler) UpdateCommodity(ctx context.Context, in *UpdateCommodityRequest, out *UpdateCommodityResponse) error {
	return h.CommodityHandler.UpdateCommodity(ctx, in, out)
}

func (h *commodityHandler) GetCommodityImages(ctx context.Context, in *GetCommodityImagesRequest, out *GetCommodityImagesResponse) error {
	return h.CommodityHandler.GetCommodityImages(ctx, in, out)
}

func (h *commodityHandler) LikeCommodity(ctx context.Context, in *LikeCommodityRequest, out *LikeCommodityResponse) error {
	return h.CommodityHandler.LikeCommodity(ctx, in, out)
}

func (h *commodityHandler) UnlikeCommodity(ctx context.Context, in *UnlikeCommodityRequest, out *UnlikeCommodityResponse) error {
	return h.CommodityHandler.UnlikeCommodity(ctx, in, out)
}

func (h *commodityHandler) GetCommodityLikedUsers(ctx context.Context, in *GetCommodityLikedUsersRequest, out *GetCommodityLikedUsersResponse) error {
	return h.CommodityHandler.GetCommodityLikedUsers(ctx, in, out)
}

func (h *commodityHandler) GetUserLikeCommodities(ctx context.Context, in *GetUserLikeCommoditiesRequest, out *GetUserLikeCommoditiesResponse) error {
	return h.CommodityHandler.GetUserLikeCommodities(ctx, in, out)
}

func (h *commodityHandler) GetCommodities(ctx context.Context, in *GetCommoditiesRequest, out *GetCommoditiesResponse) error {
	return h.CommodityHandler.GetCommodities(ctx, in, out)
}
